{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","xScale","yScale","minYear","maxYear","useState","baseTemp","setBaseTemp","monthlyVariance","setMonthlyVariance","useEffect","a","fetch","response","json","data","baseTemperature","console","log","fetchData","width","height","padding","canvas","d3","attr","tooltip","d","domain","range","Date","selectAll","enter","append","variance","on","transition","duration","style","html","pageX","pageY","xAxis","tickFormat","yAxis","call","generateAxes","className","id","x","y","dominantBaseline","textAnchor","fill","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b49f8fd1.chunk.js","sourcesContent":["import * as d3 from 'd3';\nimport { useState, useEffect } from 'react';\nimport './App.scss';\n\nfunction App() {\nconst [baseTemp, setBaseTemp] = useState('')\nconst [monthlyVariance, setMonthlyVariance] = useState([])\n\nuseEffect(() => {\n async function fetchData(){\n   let response = await fetch('https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json')\n   let data = await response.json()\n   setMonthlyVariance(data.monthlyVariance)\n   setBaseTemp(data.baseTemperature)\n   console.log(data.monthlyVariance)\n   console.log(data.baseTemperature)\n }\n fetchData()\n}, [])\n\nlet xScale, yScale, minYear, maxYear;\n\nlet width = 1200;\nlet height = 550;\nlet padding = 80;\n\nlet canvas = d3.select('#canvas')\ncanvas.attr(\"width\", width)\ncanvas.attr(\"height\", height)\n\nlet tooltip = d3.select('#tooltip')\n\nconst generateScales = () => {\n  minYear = d3.min(monthlyVariance, (d) => d['year'])\n  maxYear = d3.max(monthlyVariance, (d) => d['year'])\n\n  xScale = d3.scaleLinear()\n             .domain([minYear, maxYear + 1])\n             .range([padding, width - padding])\n\n  yScale = d3.scaleTime()\n             .domain([new Date(0, 0, 0, 0, 0, 0, 0), new Date(0, 12, 0, 0, 0, 0, 0)])\n             .range([padding, height - padding])\n\n\n}\n\nconst drawCells = () => {\n  canvas.selectAll('rect')\n     .data(monthlyVariance)\n     .enter()\n     .append('rect')\n     .attr('class', 'cell')\n     .attr('fill', (d) => {\n       let variance = d.variance\n       if(variance <= -1){\n        return '#4795FF'\n       }else if(variance <= 0){\n         return '#47E3FF'\n       }else if(variance <= 1){\n         return '#FFBF47'\n       }else{\n         return '#FEFF47'\n       } \n     })\n     .attr('data-year', (d) => d['year'])\n     .attr('data-month', (d) => d['month']- 1)\n     .attr('data-temp', (d) => baseTemp + d['variance'])\n     .attr('height', (height - (2 * padding)) / 12)\n     .attr('y', (d) => {\n       return yScale(new Date(0, d['month'] - 1, 0, 0, 0, 0, 0 ))\n     })\n     .attr('width', (d) => {\n       let totalYears = maxYear - minYear\n       return (width - (2 * padding)) / totalYears\n     })\n     .attr('x', (d) => xScale(d['year']))\n     .on('mouseover', (d) => {\n        tooltip.transition()\n        .duration(100)\n                .style('visibility', 'visible')\n        \n        let months = [\n            'January',\n            'February',\n            'March',\n            'April',\n            'May',\n            'June',\n            'July',\n            'August',\n            'September',\n            'October',\n            'November',\n            'December'\n        ]        \n        tooltip.html(d['year'] + ' - ' + months[d['month'] - 1] \n                    + '<br/>' \n                    + d3.format('+.1f')(baseTemp + d['variance'])\n                    + '&#8451; <br/>' \n                    + d3.format('+.1f')(d['variance']) + '&#8451;')\n         tooltip.style(\"left\", d3.event.pageX + 20 + \"px\")\n                .style(\"top\", d3.event.pageY - 20 + \"px\")      \n\n        tooltip.attr('data-year', d['year'])\n     })\n     .on('mouseout', (d) => {\n       tooltip.transition()\n               .duration(100)\n               .style('visibility', 'hidden')\n     })\n\n}\n\nconst generateAxes = () => {\n  let xAxis = d3.axisBottom(xScale)\n                .tickFormat(d3.format('d'))\n  let yAxis = d3.axisLeft(yScale)\n                .tickFormat(d3.timeFormat('%B'))\n            \n\n  canvas.append('g')\n     .call(xAxis)\n     .attr('id', 'x-axis')\n     .attr('transform', 'translate(0, '+ (height - padding) + ')')\n\n  canvas.append('g')\n     .call(yAxis)\n     .attr('id', 'y-axis')\n     .attr('transform', 'translate('+ padding +', 0)')\n\n}\n\nuseEffect(() => {\n  generateScales()\n  drawCells()\n  generateAxes()\n},[baseTemp])\n\n\n  return (\n    <div className=\"App\">\n      <h1 id=\"title\">Monthly Global Land-Surface Temperature</h1>\n      <div id=\"container\">\n        <svg id=\"canvas\">\n        <text x=\"50%\" y=\"7%\" dominantBaseline=\"middle\" textAnchor=\"middle\" id=\"description\">1753 - 2015: Base Temperature 8.66â„ƒ</text>\n        </svg>\n        <div id=\"name\">\n          <svg height=\"180\" width=\"160\" id=\"legend\">\n            <text x=\"50%\" y=\"10%\" dominantBaseline=\"middle\" textAnchor=\"middle\">Variance</text>\n            <g>\n            <rect x=\"40\" y=\"40\" width =\"20\" height=\"20\" fill=\"#4795FF\" />\n            <text x=\"70\" y=\"52\" fill=\"black\" >-1 or less</text>\n            </g>\n            <g>\n            <rect x=\"40\" y=\"70\" width =\"20\" height=\"20\" fill=\"#47E3FF\" />\n            <text x=\"70\" y=\"82\" fill=\"black\" >0 or less</text>\n            </g>\n            <g>\n            <rect x=\"40\" y=\"100\" width =\"20\" height=\"20\" fill=\"#FFBF47\" />\n            <text x=\"70\" y=\"113 \" fill=\"black\" >1 or less</text>\n            </g>\n            <g>\n            <rect x=\"40\" y=\"130\" width =\"20\" height=\"20\" fill=\"#FEFF47\" />\n            <text x=\"70\" y=\"142\" fill=\"black\" >1 or more</text>\n            </g>\n          </svg>\n          <br/>\n          <span id=\"da3ker\">by da3ker</span>\n        </div>\n        <div id =\"tooltip\"></div>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}